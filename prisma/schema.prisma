// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(RENTER)
  status    Status   @default(ACTIVE)
  trustScore Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rentals    Rental[]    @relation("RenterRentals")
  shop       Shop?       @relation("ShopOwner")
  reviews    Review[]    @relation("UserReviews")
  wishlist   WishlistItem[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  brand       String
  category    String
  description String
  price       Decimal
  images      String[]
  sizes       String[]
  colors      String[]
  shopId      String
  status      ProductStatus @default(AVAILABLE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shop        Shop      @relation("ShopProducts", fields: [shopId], references: [id])
  rentals     Rental[]  @relation("ProductRentals")
  reviews     Review[]  @relation("ProductReviews")
  wishlist    WishlistItem[]

  @@map("products")
}

model Rental {
  id        String   @id @default(cuid())
  productId String
  renterId  String
  startDate DateTime
  endDate   DateTime
  status    RentalStatus @default(PENDING)
  totalPrice Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product   @relation("ProductRentals", fields: [productId], references: [id])
  renter    User      @relation("RenterRentals", fields: [renterId], references: [id])

  @@map("rentals")
}

model Shop {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String   @unique
  rating      Float    @default(0)
  status      ShopStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User      @relation("ShopOwner", fields: [ownerId], references: [id])
  products    Product[] @relation("ShopProducts")

  @@map("shops")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product   @relation("ProductReviews", fields: [productId], references: [id])
  user      User      @relation("UserReviews", fields: [userId], references: [id])

  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  PARTNER
  RENTER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum ProductStatus {
  AVAILABLE
  RENTED
  UNAVAILABLE
}

enum RentalStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ShopStatus {
  PENDING
  APPROVED
  SUSPENDED
}
